Use starimage to find details of the largest image on a web page.

MAIN USAGE:

starimage.extract(url_or_html, base_url=None)

    Params:
      url_or_html:
          can be a full url eg 'http://www.example.com' (must be http or https)
          can be an html string or html fragment.

      base_url: (optional)
          starimage can only get the size of an image if it is an absolute path.
          Relative paths don't work. If base_url is set relative image urls will
          will use base_url as its base. If url_or_html param is a url the base_url
          will automatically be generated from the url but if base_url is set this
          will be used first.

    Returns:
      If no image is found None is returned
      otherwise a dictionary object is returned
      {
          'url': <url of largest image found (string)>,
          'filename': <filename of image (string)>
          'size': <size in bytes of image (long)>,
          'width': <None or width of image if width attribute set in <img /> tag (int)>,
          'height': <None or height of image if height attribute set in <img /> tag (int)>
      }

Example:
  image_details = starimage.extract('http://www.example.com')

  html = "<html><head></head><body>\n\
      <img src='http://a.com/img.gif' />\n\
      <img src='http://a.com/img.jpg' />\n\
      </body></html>"
  image_details = starimage.extract(html)

  fragment = "<div><img src='http://a.com/img1.gif' />\n\
      img src='http://a.com/img.jpg' /></div>"
  image_details = starimage.extract(fragment)
  
  if image_details != None:
      print image_details['url']
      print image_details['filename']
      print str(image_details['size'])
      if image_details['width'] != None:
          print str(image_details['width'])
      if image_details['height'] != None:
          print str(image_details['height'])

Library dependencies:
  lxml: http://lxml.de/

TESTING:

To run the main tests please run this file:
  python starimage_test.py
  Note: This runs mocks only for all web requests.

You can run your own tests based on real web requests by using a few methods.

Method to test html from a file:
  starimage_test.test_html_from_file(file_path, expected_details, base_url=None):

  Params:
      file_path: full path to a file
      expected_details: dictionary object of expected return results
      base_url: base_url to use for relative urls (optional)

Method to test from a full url or html string:
  starimage_test.test_from_url_or_html(url_or_html, expected_details, base_url=None):

  Params:
      url_or_html: full url or html string
      expected_details: dictionary object of expected return results
      base_url: base_url to use for relative urls (optional)

What is tested?
  The first test is to make sure some details are returned.
  If no details are returned an exception will be raised.

  With each of the methods there is a param for a dictionary object for details you expect 
  to be returned. You don't have to provide all the details only the ones you wish to test.
  The expected details will be tested against the details returned and if an
  expected detail doesn't match a returned detail an exception will be raised.

      expected_details param example:
          {
              'url': (string),
              'filename': (string),
              'size': (long),
              'width': (int),
              'height': (int),
          }

author: Joshua Garner